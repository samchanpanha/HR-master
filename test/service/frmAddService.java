/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package service;

import customer.clCustomer;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.table.DefaultTableModel;
import myClass.IdAndName;
import myClass.clFunction;
import myClass.dataCon;
import serviceType.clServiceType;

/**
 *
 * @author Nemesis
 */
public class frmAddService extends javax.swing.JPanel {

    /**
     * Creates new form frmAddCRM
     */
    public frmAddService(DefaultTableModel modelServiceList) {
        init();
        txtId.setText(clFunction.getLastId("services"));
        
        this.modelServiceList=modelServiceList;
    }
    
    void init(){
        
        initComponents();
        
        try {
            dataCon.connectToDB();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
        
        prepareForm();
        
        
    }
    
    public frmAddService(int selectedMaster,DefaultTableModel modelServiceList) {
       init();
       
       this.selectedMaster=selectedMaster;
       this.modelServiceList=modelServiceList;
       
       total=Double.parseDouble(modelServiceList.getValueAt(selectedMaster, 2)+"");
       
       getMasterForEdit();
       
       
       
       
    }
    
    
    void getMasterForEdit(){
        
        String serviceId=modelServiceList.getValueAt(selectedMaster, 0)+"";
        
        txtId.setText(serviceId);
        
//        "ServiceId", "Date Created", "Total", "Created By", "Customer"

        IdAndName customer=(IdAndName)modelServiceList.getValueAt(selectedMaster, 4);
        
        txtTotal.setText(modelServiceList.getValueAt(selectedMaster, 2)+"");
        
        cbCustomer.setSelectedItem(customer);
        
        
        clService.getModelServiceDetail(serviceId, modelServiceDetail);
    }
    
    
    
    int selectedMaster=-1;
    
    DefaultComboBoxModel modelCBCustomer; 
    DefaultComboBoxModel modelCBService;
   
    DefaultTableModel modelServiceDetail;
    DefaultTableModel modelServiceList;
    
    
    
    
    void prepareForm(){
        clFunction.setReadOnlyTextField(txtId);
        clFunction.setReadOnlyTextField(txtTotal);
       
        modelCBService=(DefaultComboBoxModel)cbService.getModel();
        
        modelCBCustomer=(DefaultComboBoxModel)cbCustomer.getModel();
       
        modelServiceDetail=(DefaultTableModel)jTableServiceDetail.getModel();
        
        clCustomer.getModelCBCustomerList(modelCBCustomer);
        
        clServiceType.getModelCBServiceType(modelCBService);
        
        cbCustomer.setSelectedIndex(-1);
        
        cbService.setSelectedIndex(-1);
        
        clFunction.changeLookTable(jTableServiceDetail);
        
         jTableServiceDetail.getSelectionModel().addListSelectionListener((ListSelectionEvent lse) -> {
            if (!lse.getValueIsAdjusting()) {
                changeButtonContext();
            }
        });
        
    }
    
     void changeButtonContext(){
        if(jTableServiceDetail.getSelectedRowCount()==1){
            btnAdd.setText("Cancel");
            btnEdit.setEnabled(true);
            btnDelete.setEnabled(true);
            
            getDataForEdit();
            
        }else{
            btnAdd.setText("Add");
            
            btnEdit.setEnabled(false);
            btnDelete.setEnabled(false);
            
            
            
            clearForm();
            
            
        }
    }
    

    int selectedRowIndex=-1;
     
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtId = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        cbService = new controls.SubJComboBox();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableServiceDetail = new javax.swing.JTable();
        btnSave = new javax.swing.JButton();
        cbCustomer = new controls.SubJComboBox();
        jLabel12 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtPrice = new javax.swing.JTextField();
        txtTotal = new javax.swing.JTextField();

        txtId.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        jLabel2.setText("ID:");

        btnAdd.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnEdit.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        btnEdit.setText("Edit");
        btnEdit.setEnabled(false);
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnDelete.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.setEnabled(false);
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        cbService.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N

        jLabel8.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        jLabel8.setText("Service:");

        jTableServiceDetail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "Service", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTableServiceDetail);

        btnSave.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        cbCustomer.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N

        jLabel12.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        jLabel12.setText("Customer:");

        jLabel9.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        jLabel9.setText("Price:");

        jLabel10.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        jLabel10.setText("Total:");

        txtPrice.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N

        txtTotal.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 155, Short.MAX_VALUE)
                                .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel12)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel10))
                                .addGap(72, 72, 72)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cbService, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cbCustomer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(59, 59, 59)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAdd, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnEdit, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDelete, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSave, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(35, 35, 35))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAdd)
                        .addGap(18, 18, 18)
                        .addComponent(btnEdit)
                        .addGap(18, 18, 18)
                        .addComponent(btnDelete))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(cbCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbService, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(btnSave)
                    .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        
        if(cbCustomer.getSelectedIndex()==-1){
            JOptionPane.showMessageDialog(null, "Please select a customer","",JOptionPane.ERROR_MESSAGE);
        }
        
        if(modelServiceDetail.getRowCount()==0){
            JOptionPane.showMessageDialog(null, "Please add a row","",JOptionPane.ERROR_MESSAGE);
        }
        
        
        
        String curEmpId="1"; //EMPID
        String curName="roth";
        
        List<String []> detail=new ArrayList<>();
        
        String [] d=new String[modelServiceDetail.getColumnCount()-1];
        
        IdAndName service;
        
        String price;
        
       
        
        
        for(int i=0;i<modelServiceDetail.getRowCount();i++){
            //"#", "Service", "Price"

            
            
            service=(IdAndName)modelServiceDetail.getValueAt(i,1);
            price=modelServiceDetail.getValueAt(i,2)+"";
            
            
            
            d[0]=service.getId();
            d[1]=price;
            
            detail.add(d);
            
            d=new String[modelServiceDetail.getColumnCount()-1];
        }
        
        
        DecimalFormat df=new DecimalFormat("#,##0.00");
        
        IdAndName customer=(IdAndName)cbCustomer.getSelectedItem();
        
        
        
        if(selectedMaster==-1){
            String serviceId=clFunction.getLastId("services");
            String [] master={txtTotal.getText(),curEmpId,customer.getId()};
            
           
            
            if(clService.insert(serviceId, master, detail)){
                
                
                
                
                String stNow=clFunction.getFormattedDate(new Date(),"dd/MM/yyyy HH:mm");
                
                Object []obj={serviceId,stNow,df.format(total),curName,customer};
                
                
                modelServiceList.addRow(obj);
                
                JOptionPane.showMessageDialog(this, "Add successful", "",JOptionPane.INFORMATION_MESSAGE);
            }
            
        }else{
            
            String serviceId=txtId.getText();
            String [] master={txtTotal.getText(),customer.getId()};
            
            if(clService.update(serviceId, master, detail)){
                
                
                //"ServiceId", "Date Created", "Total", "Created By", "Customer"
                
                modelServiceList.setValueAt(df.format(total) , selectedMaster, 2);
                modelServiceList.setValueAt(customer , selectedMaster, 4);
                
                
                JOptionPane.showMessageDialog(this, "Add successful", "",JOptionPane.INFORMATION_MESSAGE);
            }
            
        }
        
        
        
        
    }//GEN-LAST:event_btnSaveActionPerformed

    
    
    
    
    void clearForm(){
       
        cbService.setSelectedIndex(-1);
        txtPrice.setText("");
        
    }
    
    double total=0;
    
    boolean checkData(){
        
        
        if(cbService.getSelectedIndex()==-1){
            JOptionPane.showMessageDialog(null, "Please select a service","",JOptionPane.ERROR_MESSAGE);
            return false;
        }
        
        if(txtPrice.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Please check price","",JOptionPane.ERROR_MESSAGE);
            return false;
        }        
        
        try {
            double price = Double.parseDouble(txtPrice.getText());
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(null, "Please check price","",JOptionPane.ERROR_MESSAGE);
            return false;
        }
        
        return true;
    }
    
    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        if(btnAdd.getText().equals("Cancel")){
            jTableServiceDetail.clearSelection();
            selectedRowIndex=-1;
            return;
        }
        
        if(!checkData()) return;
        
        
        IdAndName service=(IdAndName)cbService.getSelectedItem();
        
        String serviceRow;
        
        double price=Double.parseDouble(txtPrice.getText());
        
        for(int i=0;i<modelServiceDetail.getRowCount();i++){
            serviceRow=modelServiceDetail.getValueAt(i, 1)+"";
            
            if(service.getName().equals(serviceRow)){
                
                double priceRow=Double.parseDouble(modelServiceDetail.getValueAt(i, 2)+"");
                total-=priceRow;
                price+= priceRow;
                total+=price;
                
                txtTotal.setText(total+"");
                
                modelServiceDetail.setValueAt(price, i, 2);
                clearForm();
                return;
            }
        }
        clearForm();
        
        Object [] obj={modelServiceDetail.getRowCount()+1,service,price};
        
        modelServiceDetail.addRow(obj);
        total+=price;
        txtTotal.setText(total+"");
        
    }//GEN-LAST:event_btnAddActionPerformed

   
    
    
    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        if(!checkData()) return;
        
        IdAndName service=(IdAndName)cbService.getSelectedItem();
        
        String serviceRow;
        
        double priceSelected=Double.parseDouble(modelServiceDetail.getValueAt(selectedRowIndex, 2)+"");
        
        total-=priceSelected;
        
        double price=Double.parseDouble(txtPrice.getText());
        
        for(int i=0;i<modelServiceDetail.getRowCount();i++){
            serviceRow=modelServiceDetail.getValueAt(i, 1)+"";
            
            if(service.getName().equals(serviceRow) && i!=selectedRowIndex){
                
                double priceRow=Double.parseDouble(modelServiceDetail.getValueAt(i, 2)+"");
                
                
                total-=priceRow;
                price+= priceRow;
                total+=price;
                
                txtTotal.setText(total+"");
                
                modelServiceDetail.setValueAt(price, i, 2);
                
                modelServiceDetail.removeRow(selectedRowIndex);
                
                return;
            }
        }
        
        
        
        total+=price;
        modelServiceDetail.setValueAt(service, selectedRowIndex, 1);
        modelServiceDetail.setValueAt(price, selectedRowIndex, 2);
        txtTotal.setText(total+"");
        
        
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        
        
        double priceRow=Double.parseDouble(modelServiceDetail.getValueAt(selectedRowIndex, 2)+"");
        total-=priceRow;
        txtTotal.setText(total+"");
        
        
        modelServiceDetail.removeRow(selectedRowIndex);
        
        
        clFunction.resetAutoNumber(selectedRowIndex, modelServiceDetail);
        
        
    }//GEN-LAST:event_btnDeleteActionPerformed

    
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnSave;
    private controls.SubJComboBox cbCustomer;
    private controls.SubJComboBox cbService;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableServiceDetail;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtPrice;
    private javax.swing.JTextField txtTotal;
    // End of variables declaration//GEN-END:variables

    private void getDataForEdit() {
        selectedRowIndex=jTableServiceDetail.getSelectedRow();
        cbService.setSelectedItem((IdAndName)modelServiceDetail.getValueAt(selectedRowIndex, 1) );
        txtPrice.setText(modelServiceDetail.getValueAt(selectedRowIndex, 2)+"");
    }
}



